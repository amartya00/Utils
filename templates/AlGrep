#!/usr/bin/env python

import datetime
import os
import glob
import time
import re
import gzip
import socket

class AlGrep:
	
    #Return date from string
	@staticmethod
	def getDate(datestr):
		t = None
		if len(datestr.split("-")) == 1:
			t = time.gmtime(float(datestr))
		else:
			try:
				t = time.strptime(datestr, "%Y-%m-%d-%H-%M")
			except:
				print("Could not convert date: " + datestr + ". Needs to be %Y-%m-%d-%H-%M")
				sys.exit(1)

		tstamp = time.mktime(t)
		return datetime.datetime.fromtimestamp(tstamp)
	
	# Compute files to check
	@staticmethod
	def fileLogic(root, start = None, end = None):
		filelist = glob.glob(root + "/application.log.*")
		filelist = glob.glob(root + "/application.log.*.gz")
		filelist.extend(glob.glob(root + "/transmitted/application.log.*.gz"))
		retval = []

		if start == None:
			givenstart = datetime.datetime.now() - datetime.timedelta(hours = 48)
		else:
			givenstart = AlGrep.getDate(start) - datetime.timedelta(hours = 1)
			print("Start = " + str(givenstart))
		if end == None:
			givenend = datetime.datetime.now()
		else:
			givenend = AlGrep.getDate(end)
			print("End = " + str(givenend))
		
		i = 0
		for f in filelist:
			i = i + 1
			datestr = f.split(".")[2] + "-00"
			fdate = AlGrep.getDate(datestr)
			if not (fdate < givenstart or fdate > givenend):
				retval.append(f)
		return retval

	@staticmethod
	def grep(filename, start = None, end = None):
		if filename.endswith(".gz"):
			fp = gzip.open(filename, "r")
		else:
			fp = open(filename, "r")
		buff = fp.readlines()
		if start != None:
			start = AlGrep.getDate(start)
		if end !=None:
			end = AlGrep.getDate(end)
		for i in range(0, len(buff), 1):
			sObj = re.search("(\d\d .* \d\d\d\d \d\d:\d\d:\d\d).*\[QUERY_P\] (.*)", buff[i])
			if sObj:
				timeStr = sObj.group(1)
				logtime = datetime.datetime.fromtimestamp(time.mktime(time.strptime(timeStr, "%d %b %Y %H:%M:%S")))
				if start != None and logtime < start:
					continue
				if end != None and logtime > end:
					continue
				message = sObj.group(2)
				print("[QUERY_P]\n[Time: " + timeStr + "]\n[Message: " + message + "]")
				i = i + 1
				while i < len(buff) and not re.search("\d\d .* \d\d\d\d \d\d:\d\d:\d\d.*", buff[i]):
					print(buff[i].rstrip())
					i = i + 1
				i = i - 1
				print("------------------------------------------------\n\n")
		fp.close()



def main():
	root = "/apollo/env/SERVICE_P/var/output/logs"
	start = "START_P"
	end = "END_P"
	print("Start: " + socket.gethostname())
	if start == "None":
		start = None
	if end == "None":
		end = None

	filelist = AlGrep.fileLogic(root, start, end)
	for f in filelist:
		print("\n\n")
		print("Inspecting file: " + f)
		AlGrep.grep(f, start, end)

if __name__ == "__main__":
	main()










