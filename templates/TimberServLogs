#!/usr/bin/env python

'''
    Script helps parse Timber service logs
    Needed parameters:
    [1] SERVICE_P
    [2] REGION_P
    [3] START_P
    [4] END_P
    [5] QUERY_P
'''
import datetime
import os
import glob
import time
import re
import gzip
import socket

DEBUG = "YES"

class TimberSlGrep:
	# Compute files to check
	@staticmethod
	def fileLogic(start, end):
		ts = None
		te = None
		try:
			ts = datetime.datetime.fromtimestamp(time.mktime(time.strptime(start, "%Y-%m-%d-%H-%M")))
			te = datetime.datetime.fromtimestamp(time.mktime(time.strptime(end, "%Y-%m-%d-%H-%M")))
		except:
			print("Could not convert date: " + start + "  " + end + ". Needs to be %Y-%m-%d-%H-%M")
			sys.exit(1)
		# Expand date to folder paths
		ti = ts
		filelist = []
		if DEBUG == "YES":
			print("Start date / time: " + str(ts))
			print("End date / time: " + str(te))
		while ti <= te:
			prodpath = "/onlinelogs/SERVICE_P/REGION_P/Prod/" + str(ti.year) + "/" + str(ti.month).zfill(2) + "/" + str(ti.day).zfill(2) + "/" + str(ti.hour).zfill(2) + "/"
			onebpath = "/onlinelogs/SERVICE_P/REGION_P/OneBox/Prod/" + str(ti.year) + "/" + str(ti.month).zfill(2) + "/" + str(ti.day).zfill(2) + "/" + str(ti.hour).zfill(2) + "/"
			filelist.extend(glob.glob(prodpath + "service*.*"))
			filelist.extend(glob.glob(onebpath + "service*.*"))
			ti = ti + datetime.timedelta(hours = 1)
		return filelist

	# Main Grep function
	@staticmethod
	def grep(filename, strlist):
		fp = gzip.open(filename, "r")
		logs = fp.read().split("EOE")
		fp.close()
		for query in logs:
			logic = True
			for pattern in strlist:
				if logic and (not re.search(pattern, query, re.MULTILINE | re.IGNORECASE)):
					logic = logic and False
			if logic:
				print(query)
				print("\n")

def main():
	filelist = TimberSlGrep.fileLogic("START_P", "END_P")
	if DEBUG == "YES":
		print("File list generated ...")
	strings = "QUERY_P".split(";")
	for f in filelist:
		print("FILESTART: " + f.split("/")[-1])
		TimberSlGrep.grep(f, strings)
		print("FILEEND: " + f.split("/")[-1] + "\n--------------------------------------------------\n")

if __name__ == "__main__":
	main()

